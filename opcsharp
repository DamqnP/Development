1.
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
Find the sum of all the multiples of 3 or 5 below 1000.
code:
using System;

class Program
{
    static void Main()
    {
        int limit = 1000;
        int sum = 0;

        for (int i = 1; i < limit; i++)
        {
            if (i % 3 == 0 || i % 5 == 0)
            {
                sum += i;
            }
        }

        Console.WriteLine("The sum of all multiples of 3 or 5 below 1000 is: " + sum);
    }
}


2.Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


code: 
using System;

class Program
{
    static void Main()
    {
        int limit = 4000000;
        int sum = 0;

        int firstTerm = 1;
        int secondTerm = 2;

        while (secondTerm <= limit)
        {
            if (secondTerm % 2 == 0)
            {
                sum += secondTerm;
            }

            int temp = firstTerm + secondTerm;
            firstTerm = secondTerm;
            secondTerm = temp;
        }

        Console.WriteLine("The sum of even-valued terms in the Fibonacci sequence below 4 million is: " + sum);
    }
}


3.The prime factors of 13195 are 5, 7, 13 and 29.
What is the largest prime factor of the number 600851475143 ?
code:

using System;

class Program
{
    static void Main()
    {
        int number = 600851475;
        int largestPrimeFactor = FindLargestPrimeFactor(number);

        Console.WriteLine("The largest prime factor of {0} is: {1}", number, largestPrimeFactor);
    }

    static int FindLargestPrimeFactor(int n)
    {
        int factor = 2;

        while (n > 1)
        {
            if (n % factor == 0)
            {
                n /= factor;
            }
            else
            {
                factor++;
            }
        }

        return factor;
    }
}



4.A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
Find the largest palindrome made from the product of two 3-digit numbers.
code:
using System;

class Program
{
    static void Main()
    {
        int largestPalindrome = FindLargestPalindrome();
        Console.WriteLine("The largest palindrome made from the product of two 3-digit numbers is: " + largestPalindrome);
    }

    static bool IsPalindrome(int number)
    {
        string numStr = number.ToString();
        int length = numStr.Length;

        for (int i = 0; i < length / 2; i++)
        {
            if (numStr[i] != numStr[length - 1 - i])
            {
                return false;
            }
        }

        return true;
    }

    static int FindLargestPalindrome()
    {
        int largestPalindrome = 0;

        for (int i = 100; i < 1000; i++)
        {
            for (int j = 100; j < 1000; j++)
            {
                int product = i * j;

                if (IsPalindrome(product) && product > largestPalindrome)
                {
                    largestPalindrome = product;
                }
            }
        }

        return largestPalindrome;
    }
}



5.2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
code:using System;

class Program
{
    static void Main()
    {
        int result = SmallestMultiple(1, 20);
        Console.WriteLine("The smallest positive number that is evenly divisible by all numbers from 1 to 20 is: " + result);
    }

    static int SmallestMultiple(int start, int end)
    {
        int result = 1;

        for (int i = start; i <= end; i++)
        {
            result = LCM(result, i);
        }

        return result;
    }

    static int GCD(int a, int b)
    {
        while (b != 0)
        {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }

    static int LCM(int a, int b)
    {
        return (a * b) / GCD(a, b);
    }
}



6.By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
What is the 10 001st prime number?
code: 

using System;

class Program
{
    static void Main()
    {
        int nthPrime = FindNthPrime(10001);
        Console.WriteLine("The 10,001st prime number is: " + nthPrime);
    }

    static int FindNthPrime(int n)
    {
        if (n == 1)
            return 2; // The first prime number is 2

        int count = 1;
        int candidate = 3;

        while (count < n)
        {
            if (IsPrime(candidate))
            {
                count++;
            }

            if (count < n)
            {
                candidate += 2; // Move to the next odd number
            }
        }

        return candidate;
    }

    static bool IsPrime(int number)
    {
        if (number < 2)
            return false;

        for (int i = 2; i <= Math.Sqrt(number); i++)
        {
            if (number % i == 0)
            {
                return false;
            }
        }

        return true;
    }
}

